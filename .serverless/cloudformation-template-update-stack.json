{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ConfirmUserSignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appsyncmasterclass-dev-confirmUserSignup"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "appsyncmasterclass",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appsyncmasterclass-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appsyncmasterclass-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "appsyncmasterclass",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ConfirmUserSignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appsyncmasterclass/dev/1620494278762-2021-05-08T17:17:58.762Z/appsyncmasterclass.zip"
        },
        "Handler": "functions/confirm-user-signup.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "appsyncmasterclass-dev-confirmUserSignup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "USERS_TABLE": {
              "Ref": "UsersTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ConfirmUserSignupIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConfirmUserSignupIamRoleLambdaExecution",
        "ConfirmUserSignupLogGroup"
      ]
    },
    "ConfirmUserSignupLambdaVersionkrpWv7DT0fV9oYZnutqHPiXq0b5QKbkHBKKh3WZXzGQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConfirmUserSignupLambdaFunction"
        },
        "CodeSha256": "BIl19AhHrB6cN7+wMYQ85ZtsC3Uj4ypiUf+5vFWHCaM="
      }
    },
    "ConfirmUserSignupIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "appsyncmasterclass",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appsyncmasterclass-dev-confirmUserSignup:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "UsersTable",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "appsyncmasterclass",
              "dev",
              "confirmUserSignup",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Name",
            "Value": "users-table"
          }
        ]
      }
    },
    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": false,
            "RequireNumbers": false,
            "RequireUppercase": false,
            "RequireSymbols": false
          }
        },
        "UsernameAttributes": [
          "email"
        ],
        "Schema": [
          {
            "AttributeDataType": "String",
            "Name": "name",
            "Required": false,
            "Mutable": true
          }
        ],
        "LambdaConfig": {
          "PostConfirmation": {
            "Fn::GetAtt": [
              "ConfirmUserSignupLambdaFunction",
              "Arn"
            ]
          }
        }
      }
    },
    "UserPoolInvokeConfirmUserSignupLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "ConfirmUserSignupLambdaFunction"
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPool",
            "Arn"
          ]
        }
      }
    },
    "WebUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ClientName": "web",
        "ExplicitAuthFlows": [
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "PreventUserExistenceErrors": "ENABLED"
      }
    },
    "AppsyncmasterclassGraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "appsyncmasterclass",
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "AdditionalAuthenticationProviders": [],
        "UserPoolConfig": {
          "AwsRegion": "us-east-1",
          "UserPoolId": {
            "Ref": "CognitoUserPool"
          },
          "DefaultAction": "ALLOW"
        },
        "XrayEnabled": false
      }
    },
    "AppsyncmasterclassGraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "type Query {\n  getImageUploadUrl(extension: String, contentType: String): AWSURL!\n  getMyTimeline(limit: Int!, nextToken: String): TweetsPage!\n  getMyProfile: MyProfile!\n  getProfile(screenName: String!): OtherProfile!\n  getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!\n  getLikes(userId: ID!, limit: Int!, nextToken: String): TweetsPage!\n  getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!\n  getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!\n}\n\ntype Mutation {\n  editMyProfile(newProfile: ProfileInput!): MyProfile!\n  tweet(text: String!): Tweet!\n  like(tweetId: ID!): Boolean!\n  unlike(tweetId: ID!): Boolean!\n  retweet(tweetId: ID!): Boolean!\n  unretweet(tweetId: ID!): Boolean!\n  reply(tweetId: ID!, text: String!): Reply!\n  follow(userId: ID!): Boolean!\n  unfollow(userId: ID!): Boolean!\n}\n\ninput ProfileInput {\n  name: String!\n  imageUrl: AWSURL\n  backgroundImageUrl: AWSURL\n  bio: String\n  location: String\n  website: AWSURL\n  birthdate: AWSDate\n}\n\ninterface IProfile {\n  id: ID!\n  name: String!\n  screenName: String!\n  imageUrl: AWSURL\n  backgroundImageUrl: AWSURL\n  bio: String\n  location: String\n  website: AWSURL\n  birthdate: AWSDate\n  createdAt: AWSDateTime!\n  tweets: TweetsPage!\n  followersCount: Int!\n  followingCount: Int!\n  tweetsCount: Int!\n  likesCounts: Int!\n}\n\ntype MyProfile implements IProfile {\n  id: ID!\n  name: String!\n  screenName: String!\n  imageUrl: AWSURL\n  backgroundImageUrl: AWSURL\n  bio: String\n  location: String\n  website: AWSURL\n  birthdate: AWSDate\n  createdAt: AWSDateTime!\n  tweets: TweetsPage!\n  followersCount: Int!\n  followingCount: Int!\n  tweetsCount: Int!\n  likesCounts: Int!\n}\n\ntype OtherProfile implements IProfile {\n  id: ID!\n  name: String!\n  screenName: String!\n  imageUrl: AWSURL\n  backgroundImageUrl: AWSURL\n  bio: String\n  location: String\n  website: AWSURL\n  birthdate: AWSDate\n  createdAt: AWSDateTime!\n  tweets: TweetsPage!\n  followersCount: Int!\n  followingCount: Int!\n  tweetsCount: Int!\n  likesCounts: Int!\n  following: Boolean!\n  followedBy: Boolean!\n}\n\ninterface ITweet {\n  id: ID!\n  profile: IProfile!\n  createdAt: AWSDateTime!\n}\n\ntype Tweet implements ITweet {\n  id: ID!\n  profile: IProfile!\n  createdAt: AWSDateTime!\n  text: String!\n  replies: Int!\n  likes: Int!\n  retweets: Int!\n  liked: Boolean!\n  retweeted: Boolean!\n}\n\ntype Reply implements ITweet {\n  id: ID!\n  profile: IProfile!\n  createdAt: AWSDateTime!\n  inReplyToTweet: ITweet!\n  inReplyToUsers: [IProfile!]\n  text: String!\n  replies: Int!\n  likes: Int!\n  retweets: Int!\n  liked: Boolean!\n  retweeted: Boolean!\n}\n\ntype Retweet implements ITweet {\n  id: ID!\n  profile: IProfile!\n  createdAt: AWSDateTime!\n  retweetOf: ITweet!\n}\n\ntype TweetsPage {\n  tweets: [ITweet!]\n  nextToken: String\n}\n\ntype ProfilesPage {\n  profiles: [IProfile!]\n  nextToken: String\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
        "ApiId": {
          "Fn::GetAtt": [
            "AppsyncmasterclassGraphQlApi",
            "ApiId"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-appsyncmasterclass-dev-ServerlessDeploymentBucketName"
      }
    },
    "ConfirmUserSignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConfirmUserSignupLambdaVersionkrpWv7DT0fV9oYZnutqHPiXq0b5QKbkHBKKh3WZXzGQ"
      },
      "Export": {
        "Name": "sls-appsyncmasterclass-dev-ConfirmUserSignupLambdaFunctionQualifiedArn"
      }
    },
    "CognitoUserPoolId": {
      "Value": {
        "Ref": "CognitoUserPool"
      }
    },
    "AppsyncmasterclassGraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "AppsyncmasterclassGraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AppsyncmasterclassGraphQlApiId"
        }
      }
    },
    "AppsyncmasterclassGraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "AppsyncmasterclassGraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AppsyncmasterclassGraphQlApiUrl"
        }
      }
    }
  }
}